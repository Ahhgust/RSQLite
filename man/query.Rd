% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/Result.R
\docType{methods}
\name{query}
\alias{dbBind,SQLiteResult-method}
\alias{dbClearResult,SQLiteResult-method}
\alias{dbFetch,SQLiteResult-method}
\alias{dbGetQuery,SQLiteConnection,character-method}
\alias{dbListResults,SQLiteConnection-method}
\alias{dbSendQuery,SQLiteConnection,character-method}
\alias{fetch,SQLiteResult-method}
\alias{query}
\title{Execute a SQL statement on a database connection}
\usage{
\S4method{dbSendQuery}{SQLiteConnection,character}(conn, statement,
  params = NULL, ...)

\S4method{dbGetQuery}{SQLiteConnection,character}(conn, statement, ...)

\S4method{dbBind}{SQLiteResult}(res, params, ...)

\S4method{dbFetch}{SQLiteResult}(res, n = -1, ...)

\S4method{fetch}{SQLiteResult}(res, n = -1, ...)

\S4method{dbClearResult}{SQLiteResult}(res, ...)

\S4method{dbListResults}{SQLiteConnection}(conn, ...)
}
\arguments{
\item{conn}{an \code{\linkS4class{SQLiteConnection}} object.}

\item{statement}{a character vector of length one specifying the SQL
statement that should be executed.  Only a single SQL statment should be
provided.}

\item{...}{Unused. Needed for compatibility with generic.}

\item{res}{an \code{\linkS4class{SQLiteResult}} object.}

\item{n}{maximum number of records to retrieve per fetch. Use \code{-1} to
retrieve all pending records; use \code{0} for to fetch the default
number of rows as defined in \code{\link{SQLite}}}
}
\description{
To retrieve results a chunk at a time, use \code{dbSendQuery},
\code{dbFetch}, then \code{ClearResult}. Alternatively, if you want all the
results (and they'll fit in memory) use \code{dbGetQuery} which sends,
fetches and clears for you.
}
\examples{
db <- RSQLite::datasetsDb()

# Run query to get results as dataframe
dbGetQuery(db, "SELECT * FROM USArrests LIMIT 3")

# Send query to pull requests in batches
res <- dbSendQuery(con, "SELECT * FROM USArrests")
dbFetch(res, n = 2)
dbFetch(res, n = 2)
dbHasCompleted(res)
dbClearResult(res)

# Parameterised queries are safest when you accept user input
dbGetQuery(db, "SELECT * FROM USArrests WHERE Murder < ?", list(3))

# Or create and then bind
rs <- dbSendQuery(db, "SELECT * FROM USArrests WHERE Murder < ?")
dbBind(rs, list(3))
dbFetch(rs)

dbDisconnect(db)
}

