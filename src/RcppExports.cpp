// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RSQLite.h"
#include <Rcpp.h>

using namespace Rcpp;

// rsqlite_connect
XPtr<SqliteConnection> rsqlite_connect(std::string path, bool allow_ext, int flags, std::string vfs = "");
RcppExport SEXP RSQLite_rsqlite_connect(SEXP pathSEXP, SEXP allow_extSEXP, SEXP flagsSEXP, SEXP vfsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type path(pathSEXP );
        Rcpp::traits::input_parameter< bool >::type allow_ext(allow_extSEXP );
        Rcpp::traits::input_parameter< int >::type flags(flagsSEXP );
        Rcpp::traits::input_parameter< std::string >::type vfs(vfsSEXP );
        XPtr<SqliteConnection> __result = rsqlite_connect(path, allow_ext, flags, vfs);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rsqlite_disconnect
void rsqlite_disconnect(XPtr<SqliteConnection> con);
RcppExport SEXP RSQLite_rsqlite_disconnect(SEXP conSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< XPtr<SqliteConnection> >::type con(conSEXP );
        rsqlite_disconnect(con);
    }
    return R_NilValue;
END_RCPP
}
// rsqlite_get_exception
std::string rsqlite_get_exception(XPtr<SqliteConnection> con);
RcppExport SEXP RSQLite_rsqlite_get_exception(SEXP conSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< XPtr<SqliteConnection> >::type con(conSEXP );
        std::string __result = rsqlite_get_exception(con);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rsqlite_is_valid
bool rsqlite_is_valid(XPtr<SqliteConnection> con);
RcppExport SEXP RSQLite_rsqlite_is_valid(SEXP conSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< XPtr<SqliteConnection> >::type con(conSEXP );
        bool __result = rsqlite_is_valid(con);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rsqlite_send_query
XPtr<SqliteResult> rsqlite_send_query(XPtr<SqliteConnection> con, std::string sql);
RcppExport SEXP RSQLite_rsqlite_send_query(SEXP conSEXP, SEXP sqlSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< XPtr<SqliteConnection> >::type con(conSEXP );
        Rcpp::traits::input_parameter< std::string >::type sql(sqlSEXP );
        XPtr<SqliteResult> __result = rsqlite_send_query(con, sql);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rsqlite_clear_result
void rsqlite_clear_result(XPtr<SqliteResult> res);
RcppExport SEXP RSQLite_rsqlite_clear_result(SEXP resSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< XPtr<SqliteResult> >::type res(resSEXP );
        rsqlite_clear_result(res);
    }
    return R_NilValue;
END_RCPP
}
